---
title: "Descriptive analysis MatchBoots"
format: docx
execute:
  echo: false
editor: visual
---

## Table 1 parameters

```{r}
#| output: false
#| warning: false

library(gtsummary)
library(htmlwidgets)
library(ggplot2)
library(cowplot)
library(data.table)
library(stringr)
```

```{r}
#| output: false

parent_wd <- dirname(getwd())
load(file.path(parent_wd, "g_parameters", "parameters.RData"))

# bnch <- qs::qread(file.path(parent_wd, "g_results", "Laptop 1", paste0("combined_benchmarks", ".qs")))
bnch <- qs::qread(file.path(parent_wd, "g_results", "Server 1", paste0("combined_benchmarks", ".qs")))
# bnch <- rbindlist(lapply(bnch, function(x) x[, mem_alloc := as.numeric(mem_alloc)]))
```

```{r}
#| output: false

bnch$algo <- factor(bnch$algo, levels = c("Naive", "Hash", "Threshold"))
bnch$cm <- factor(bnch$cm, levels = sort(unique(bnch$cm)))
bnch$mem_alloc <- bnch$mem_alloc / 1024 ^ 2
bnch$exp <- as.factor(bnch$exp)
bnch$threshold_to_use <- factor(bnch$threshold_to_use)
bnch[, secondary_memory_usage := (size_intermediate + size_output) / 1024]

bnch[, match_vars_label := data.table::fcase(match_vars_label == "Mat1", "Age exact + Uniform",
                                             match_vars_label == "Mat2", "Age +=1 + Uniform",
                                             match_vars_label == "Mat3", "Age exact + Normal")]
bnch[, match_vars_label := factor(match_vars_label, levels = c("Age exact + Uniform", "Age +=1 + Uniform",
                                                               "Age exact + Normal"))]

bnch[, samp_schema_label := data.table::fcase(samp_schema_label == "S1", "Sample 1 cm to each exposed",
                                              samp_schema_label == "SN", "Take all cm to each exposed",
                                              samp_schema_label == "S1B10SExp", "Sample 1 cm to each exposed and take 10 bootstrap sampling from the exposed",
                                              samp_schema_label == "S1B10SUoO", "Sample 1 cm to each exposed and take 10 bootstrap sampling from all UoO")]
bnch[, samp_schema_label := factor(samp_schema_label,
                                   levels = c("Sample 1 cm to each exposed", "Take all cm to each exposed",
                                              "Sample 1 cm to each exposed and take 10 bootstrap sampling from the exposed",
                                              "Sample 1 cm to each exposed and take 10 bootstrap sampling from all UoO"))]

bnch[, cores_label := "C1"]
bnch[, cores_label := data.table::fcase(cores_label == "C1", "Use 1 thread",
                                        cores_label == "Cdef", "Use half the threads present in the CPU")]

bnch[, threshold_to_use := factor(threshold_to_use, levels = c(NA, 1, "half", "max", "double"))]

bnch <- bnch[!(cm == 100 & exp == 1000000), ]


```

```{r}
#| echo: false
bnch %>% tbl_summary(by = exp,
                     include = c(algo, cm, threshold_to_use, match_vars_label,
                                 samp_schema_label, cores_label),
                     label = list(
                       algo ~ "Algorithm",
                       cm ~ "Additional candidate matches proportion",
                       threshold_to_use ~ "Threshold to use",
                       match_vars_label ~ "Matching rules and Variable distributions",
                       samp_schema_label ~ "Sampling of candidate matches and bootstrap schema",
                       cores_label ~ "Number of cores used")
                     ) %>%
  as_gt()
```

## Table 1 metrics

```{r}
#| echo: false
bnch %>% mutate(time1 = time, mem_alloc1 = mem_alloc, secondary_memory_usage1 = secondary_memory_usage,
                time2 = time, mem_alloc2 = mem_alloc, secondary_memory_usage2 = secondary_memory_usage) %>% 
  tbl_summary(by = exp,
                     include = c(time, time1, time2, mem_alloc, mem_alloc1, mem_alloc2, secondary_memory_usage,
                                 secondary_memory_usage1, secondary_memory_usage2),
                     statistic = list(
                       time ~ "{min} / {max}",
                       time1 ~ "{p25} / {median} / {p75}",
                       time2 ~ "{mean} / {sd}",
                       mem_alloc ~ "{min} / {max}",
                       mem_alloc1 ~ "{p25} / {median} / {p75}",
                       mem_alloc2 ~ "{mean} / {sd}",
                       secondary_memory_usage ~ "{min} / {max}",
                       secondary_memory_usage1 ~ "{p25} / {median} / {p75}",
                       secondary_memory_usage2 ~ "{mean} / {sd}"
                     ),
                     label = list(
                       time ~ "Time (s) (Min, Max)",
                       time1 ~ "Time (s) (25%, Median, 75%)",
                       time2 ~ "Time (s) (Mean, SD)",
                       mem_alloc ~ "Memory allocation (MB) (Min, Max)",
                       mem_alloc1 ~ "Memory allocation (MB) (25%, Median, 75%)",
                       mem_alloc2 ~ "Memory allocation (MB) (Mean, SD)",
                       secondary_memory_usage ~ "Secondary memory usage (KB) (Min, Max)",
                       secondary_memory_usage1 ~ "Secondary memory usage (KB) (25%, Median, 75%)",
                       secondary_memory_usage2 ~ "Secondary memory usage (KB) (Mean, SD)")
                     ) %>%
    modify_footnote(all_stat_cols(FALSE) ~ NA) %>%
  as_gt()
```

## Algorithm

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = exp, y = time, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = exp, y = time, fill = cm)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = exp, y = time, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = exp, y = time, fill = cm)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

Fig. A shows computation time plotted against the number of exposed as boxplots stratified by type of algorithm. Increments of **Naive** and **Hash** approaches seems to always be exponential and there is negligible difference between them in all combination of exposed. We could say they are well-behaved since an exponential growth was expected since increasing the size of the original tables, exposed and consequently candidate matches, by a factor of *n* results in a Cartesian products with output large the previous one by a factor of *n^2^*. The **Threshold** approach has a more interesting trend and can be better studied by dividing the analysis in Orders of Magnitude (OoM) of the number of exposed:

- OoM 2-3. The increasing is much larger than **Naive** and **Hash** ones. This is probably caused by the distribution of the original data: the data generating process is random and consistent but the variability of each variable's distribution is still very high at small sample sizes. Larger sets have less variability by nature of law of large numbers. This initial variability can influence the results not during the join itself but by modifying the number of batches: a larger than expected maximum frequency of strata combinations results in a smaller number of batches and viceversa.

- OoM 3-4. The increasing (~2-3X) of the **Threshold** approach is much smaller than **Naive** and **Hash** ones (10% and over). The **Threshold** approach has inherently more procedures to be done than the other ones and all of those procedure has a basic costs independently of dataset size (e.g. accessing a file on secondary memory). As the number of exposed increases those costs matter less and less compared to the real computation to be done on the dataset.

- OoM 4-5. The increasing of the **Threshold** approach is again smaller than **Naive** and **Hash** ones, however it is clear the growth is no longer linear but exponential now. At OoM 5 the **Threshold** approach has the same computational cost in terms of time as the other two approaches.

- OoM 5-6. **Naive** and **Hash** approaches are not present because of the error discussed above. The **Threshold** approach confirm the exponential growth seen from OoM 4-5.

Fig. B shows the distribution of computation time plotted against the number of exposed stratified by type of algorithm.
Additionally to what has already been discussed in Fig. A. Low OoMs have more peculiar distributions, lower results even bimodal, which tends as OoM grows to a more symmetric one. OoM 6 is an exception probably due to the low number of comaination of experiments.
The bimodal distributions at low OoMs may be due to the basic cost discussed in Fig. A OoM 3-4.

Fig. C shows computation time plotted against the number of exposed as boxplots stratified by proportion of additional candidate matches.
Fig. D shows the distribution of computation time plotted against the number of exposed stratified by proportion of additional candidate matches.
Increasing the proportion of additional candidate matches seems to have a different effect across OoMs: the growth is always exponential but it is faster as OoM increases. It is possible this trend stops after OoM 4 however we don't have enough stratification for candidate matches to reach a conclusion.
Opposite to Fig. A here the more distributions happens at OoM 5, especially 20000, this is probably due to the matching rules which effect we will se in Fig X have a not constant effect across exposed dataset size.


```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = exp, y = mem_alloc, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = exp, y = mem_alloc, fill = cm)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = exp, y = mem_alloc, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = exp, y = mem_alloc, fill = cm)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

Fig. A shows total memory allocated on RAM plotted against the number of exposed as boxplots stratified by type of algorithm.
Fig. B shows the distribution of total memory allocated on RAM plotted against the number of exposed stratified by type of algorithm.
Fig. C shows total memory allocated on RAM plotted against the number of exposed as boxplots stratified by proportion of additional candidate matches.
Fig. D shows the distribution of total memory allocated on RAM plotted against the number of exposed stratified by proportion of additional candidate matches.

These plots are very similar to ones with respect to computation time.
There are two man difference:

- At low OoM of exposed the difference between **Naive**/**Hash** approaches compared to **Threshold** one. Probably the some basic costs discussed at Fig. A OoM 3-4 disproportionately impact time and not memory. An example would be again the access to a file on disk: it does not require allocation on RAM but require a certain amount of time.

- At high OoM of exposed some differences are still present between approaches even between **Naive** and **Hash**.
  - **Hash** and **Threshold** need to compute, save and reload hash tables which require allocations.
  - **Threshold** need to compute, save partial joined dataset to be reloaded later on.



```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = exp, y = secondary_memory_usage, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = exp, y = secondary_memory_usage, fill = cm)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = exp, y = secondary_memory_usage, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = exp, y = secondary_memory_usage, fill = cm)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

Fig. A shows secondary memory usage plotted against the number of exposed as boxplots stratified by type of algorithm.
Fig. B shows the distribution of secondary memory usage plotted against the number of exposed stratified by type of algorithm.
Fig. C shows secondary memory usage plotted against the number of exposed as boxplots stratified by proportion of additional candidate matches.
Fig. D shows the distribution of secondary memory usage plotted against the number of exposed stratified by proportion of additional candidate matches.

Compared to computation time and total memory allocated on RAM the trends seems much more linear. We have more outliers than before but they are probably due to randomness in the data that needs to be compressed and efficiency in finding patters of the algorithm used by the qs package.
The maximum for 20000 exposed is around ~700MB since there increase is linear we can deduce that even for higher OoM of exposed the size of the data on disk should not became an issue, especially consider most of this space is temporary space used to store intermediate datasets. Once the computation of the function has finished we could safely removed those file from disk.
Since secondary memory usage won't be an issue in general later plots with respect to this metric won't be commented but are still available in appendix.

```{r}
#| output: false

bnch_ori <- copy(bnch)
bnch <- bnch[!(exp %in% c(1000, 2000) & cm == 1000), ]
bnch <- bnch[!(exp %in% c(100000, 200000) & cm == 10), ]
bnch <- bnch[exp != 1000000, ]

```

## Candidate matches

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = cm, y = time, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = cm, y = time, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = cm, y = time, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = cm, y = time, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```
Fig. A shows computation time plotted against the number of exposed as boxplots stratified by type of algorithm.
Fig. B shows the distribution of computation time plotted against the number of exposed stratified by type of algorithm.
Fig. C shows computation time plotted against the number of exposed as boxplots stratified by proportion of additional candidate matches.
Fig. D shows the distribution of computation time plotted against the number of exposed stratified by proportion of additional candidate matches.

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = cm, y = mem_alloc, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = cm, y = mem_alloc, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = cm, y = mem_alloc, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = cm, y = mem_alloc, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = cm, y = secondary_memory_usage, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = cm, y = secondary_memory_usage, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = cm, y = secondary_memory_usage, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = cm, y = secondary_memory_usage, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

## Threshold to use

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = threshold_to_use, y = time, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = threshold_to_use, y = time, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = threshold_to_use, y = time, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = threshold_to_use, y = time, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = threshold_to_use, y = mem_alloc, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = threshold_to_use, y = mem_alloc, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = threshold_to_use, y = mem_alloc, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = threshold_to_use, y = mem_alloc, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = threshold_to_use, y = secondary_memory_usage, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = threshold_to_use, y = secondary_memory_usage, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = threshold_to_use, y = secondary_memory_usage, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = threshold_to_use, y = secondary_memory_usage, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

## Matching rules and Variable distributions

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = match_vars_label, y = time, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = match_vars_label, y = time, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = match_vars_label, y = time, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = match_vars_label, y = time, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = match_vars_label, y = mem_alloc, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = match_vars_label, y = mem_alloc, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = match_vars_label, y = mem_alloc, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = match_vars_label, y = mem_alloc, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = match_vars_label, y = secondary_memory_usage, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = match_vars_label, y = secondary_memory_usage, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = match_vars_label, y = secondary_memory_usage, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = match_vars_label, y = secondary_memory_usage, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

## Sampling of candidate matches and bootstrap schema

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = samp_schema_label, y = time, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_box <- ggplot(bnch, aes(x = samp_schema_label, y = time, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
algo_vio <- ggplot(bnch, aes(x = samp_schema_label, y = time, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_vio <- ggplot(bnch, aes(x = samp_schema_label, y = time, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch_ori, aes(x = samp_schema_label, y = time, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_box <- ggplot(bnch_ori, aes(x = samp_schema_label, y = time, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
algo_vio <- ggplot(bnch_ori, aes(x = samp_schema_label, y = time, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_vio <- ggplot(bnch_ori, aes(x = samp_schema_label, y = time, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = samp_schema_label, y = mem_alloc, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_box <- ggplot(bnch, aes(x = samp_schema_label, y = mem_alloc, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
algo_vio <- ggplot(bnch, aes(x = samp_schema_label, y = mem_alloc, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_vio <- ggplot(bnch, aes(x = samp_schema_label, y = mem_alloc, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```
```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch_ori, aes(x = samp_schema_label, y = mem_alloc, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_box <- ggplot(bnch_ori, aes(x = samp_schema_label, y = mem_alloc, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
algo_vio <- ggplot(bnch_ori, aes(x = samp_schema_label, y = mem_alloc, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_vio <- ggplot(bnch_ori, aes(x = samp_schema_label, y = mem_alloc, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = samp_schema_label, y = secondary_memory_usage, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_box <- ggplot(bnch, aes(x = samp_schema_label, y = secondary_memory_usage, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
algo_vio <- ggplot(bnch, aes(x = samp_schema_label, y = secondary_memory_usage, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_vio <- ggplot(bnch, aes(x = samp_schema_label, y = secondary_memory_usage, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```
```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch_ori, aes(x = samp_schema_label, y = secondary_memory_usage, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_box <- ggplot(bnch_ori, aes(x = samp_schema_label, y = secondary_memory_usage, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
algo_vio <- ggplot(bnch_ori, aes(x = samp_schema_label, y = secondary_memory_usage, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
exp_vio <- ggplot(bnch_ori, aes(x = samp_schema_label, y = secondary_memory_usage, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma()) +
  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20))
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

## Number of cores used

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = cores_label, y = time, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = cores_label, y = time, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = cores_label, y = time, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = cores_label, y = time, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = cores_label, y = mem_alloc, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = cores_label, y = mem_alloc, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = cores_label, y = mem_alloc, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = cores_label, y = mem_alloc, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
algo_box <- ggplot(bnch, aes(x = cores_label, y = secondary_memory_usage, fill = algo)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_box <- ggplot(bnch, aes(x = cores_label, y = secondary_memory_usage, fill = exp)) + 
    geom_boxplot() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.775), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
algo_vio <- ggplot(bnch, aes(x = cores_label, y = secondary_memory_usage, fill = algo)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
exp_vio <- ggplot(bnch, aes(x = cores_label, y = secondary_memory_usage, fill = exp)) + 
    geom_violin() +
    stat_summary(fun = mean, geom = "point", shape = 20, position = position_dodge(0.9), size = 4, color = "red",
                show.legend = FALSE) +
  scale_y_log10(labels = scales::label_comma())
plot_grid(algo_box, algo_vio, exp_box, exp_vio, labels = c("A", "B", "C", "D"), ncol = 2, nrow = 2)
```

```{r fig.height=8,fig.width=16}
#| echo: false
car::powerTransform(bnch$time, family="bcPower")
plot(sort(bnch$time))
plot(log(sort(bnch$time)))
```
